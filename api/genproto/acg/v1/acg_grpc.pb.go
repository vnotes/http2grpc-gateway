// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: acg/v1/acg.proto

package acg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AcgServiceClient is the client API for AcgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AcgServiceClient interface {
	Animation(ctx context.Context, in *AnimationRequest, opts ...grpc.CallOption) (*AnimationResponse, error)
	Comics(ctx context.Context, in *ComicsRequest, opts ...grpc.CallOption) (*ComicsResponse, error)
}

type acgServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAcgServiceClient(cc grpc.ClientConnInterface) AcgServiceClient {
	return &acgServiceClient{cc}
}

func (c *acgServiceClient) Animation(ctx context.Context, in *AnimationRequest, opts ...grpc.CallOption) (*AnimationResponse, error) {
	out := new(AnimationResponse)
	err := c.cc.Invoke(ctx, "/acg.v1.AcgService/Animation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acgServiceClient) Comics(ctx context.Context, in *ComicsRequest, opts ...grpc.CallOption) (*ComicsResponse, error) {
	out := new(ComicsResponse)
	err := c.cc.Invoke(ctx, "/acg.v1.AcgService/Comics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AcgServiceServer is the server API for AcgService service.
// All implementations must embed UnimplementedAcgServiceServer
// for forward compatibility
type AcgServiceServer interface {
	Animation(context.Context, *AnimationRequest) (*AnimationResponse, error)
	Comics(context.Context, *ComicsRequest) (*ComicsResponse, error)
	mustEmbedUnimplementedAcgServiceServer()
}

// UnimplementedAcgServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAcgServiceServer struct {
}

func (UnimplementedAcgServiceServer) Animation(context.Context, *AnimationRequest) (*AnimationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Animation not implemented")
}
func (UnimplementedAcgServiceServer) Comics(context.Context, *ComicsRequest) (*ComicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Comics not implemented")
}
func (UnimplementedAcgServiceServer) mustEmbedUnimplementedAcgServiceServer() {}

// UnsafeAcgServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AcgServiceServer will
// result in compilation errors.
type UnsafeAcgServiceServer interface {
	mustEmbedUnimplementedAcgServiceServer()
}

func RegisterAcgServiceServer(s grpc.ServiceRegistrar, srv AcgServiceServer) {
	s.RegisterService(&AcgService_ServiceDesc, srv)
}

func _AcgService_Animation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnimationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcgServiceServer).Animation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acg.v1.AcgService/Animation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcgServiceServer).Animation(ctx, req.(*AnimationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcgService_Comics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcgServiceServer).Comics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acg.v1.AcgService/Comics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcgServiceServer).Comics(ctx, req.(*ComicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AcgService_ServiceDesc is the grpc.ServiceDesc for AcgService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AcgService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "acg.v1.AcgService",
	HandlerType: (*AcgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Animation",
			Handler:    _AcgService_Animation_Handler,
		},
		{
			MethodName: "Comics",
			Handler:    _AcgService_Comics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acg/v1/acg.proto",
}
